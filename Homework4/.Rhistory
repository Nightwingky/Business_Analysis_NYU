library(lubridate)
library(ggplot2)
library(sqldf)
library(dplyr)
library(treemapify)
library(maps)
library(plyr)
library(pheatmap)
url_citibike<-"https://raw.githubusercontent.com/jcbonilla/BusinessAnalytics/master/BAData/CitiBike%20Data.csv"
data_citibike<-read.csv(url_citibike, stringsAsFactors = FALSE, header = TRUE)
head(data_citibike)
boxplot(data_citibike$tripduration)
summary(data_citibike$tripduration)
lower_bound_trip<-quantile(data_citibike$tripduration,0.01)
upper_bound_trip<-quantile(data_citibike$tripduration,0.99)
data_citibike$age<-2020 - as.numeric(data_citibike$birth.year)
boxplot(data_citibike$age)
summary(data_citibike$age)
lower_bound_age<-quantile(data_citibike$age, 0.01)
upper_bound_age<-quantile(data_citibike$age, 0.99)
outliner_index<-which((data_citibike$tripduration < lower_bound_trip | data_citibike$tripduration > upper_bound_trip) | (data_citibike$age < lower_bound_age | data_citibike$age > upper_bound_age))
anomalies<-data_citibike[outliner_index, ]
head(anomalies)
data_citibike<-data_citibike[-outliner_index, ]
data_citibike<-subset(data_citibike, data_citibike$usertype=="Subscriber")
data_citibike$starttime<-as.POSIXct(data_citibike$starttime, format = "%m/%d/%y %H:%M")
breaks<-hour(hm("00:00", "08:00", "12:00", "19:00", "23:59"))
labels<-c("Evening", "Morning", "Alternative", "Evening")
data_citibike$time<-cut(x=hour(data_citibike$starttime), breaks = breaks, labels = labels, include.lowest
=TRUE)
usage_morning<-sqldf("select [start.station.id] as station_id, [start.station.name] as station_name, [start.station.latitude] as lat, [start.station.longitude] as long, sum([tripduration]) as total_usage from data_citibike where time like 'Morning' group by [start.station.id] order by total_usage desc limit 5")
usage_morning
ggplot(usage_morning, aes(x=station_name, y=total_usage)) +
geom_bar(stat="identity",width=0.5) +
geom_text(aes(label=total_usage), vjust=1.6, color="white", size=3) +
ggtitle("Morning")
usage_alternative<-sqldf("select [start.station.id] as station_id, [start.station.name] as station_name, [start.station.latitude] as lat, [start.station.longitude] as long, sum([tripduration]) as total_usage from data_citibike where time like 'Alternative' group by [start.station.id] order by total_usage desc limit 5")
usage_alternative
ggplot(usage_alternative, aes(x=station_name, y=total_usage)) +
geom_bar(stat="identity",width=0.5) +
geom_text(aes(label=total_usage), vjust=1.6, color="white", size=3) +
ggtitle("Alternative")
usage_evening<-sqldf("select [start.station.id] as station_id, [start.station.name] as station_name, [start.station.latitude] as lat, [start.station.longitude] as long, sum([tripduration]) as total_usage from data_citibike where time like 'Evening' group by [start.station.id] order by total_usage desc limit 5")
usage_evening
ggplot(usage_evening, aes(x=station_name, y=total_usage)) +
geom_bar(stat="identity",width=0.5) +
geom_text(aes(label=total_usage), vjust=1.6, color="white", size=3) +
ggtitle("Evening")
aviation_url<-"https://raw.githubusercontent.com/jcbonilla/BusinessAnalytics/master/BAData/aviation.csv"
aviation<-read.csv(aviation_url, stringsAsFactors = FALSE, header = TRUE)
head(aviation)
Year<-format(as.Date(aviation$Event.Date, format = "%m/%d/%Y"), "%Y")
aviation$year<-as.integer(Year)
accident_us<-sqldf("select * from aviation where [Country] like '%United States%'")
head(accident_us)
summary(accident_us$year)
accident_us<-mutate(accident_us, accident_category=if_else(accident_us$Injury.Severity==" Non-Fatal ", "non-fatal","fatal"))
non_fatal_crashes<-sqldf("select * from accident_us where [accident_category] = 'non-fatal'")
fatal_crashes<-sqldf("select * from accident_us where [accident_category] = 'fatal'")
ggplot(data=accident_us, mapping=aes(x=accident_category, fill=accident_category)) + geom_bar(stat="count",width=0.5) +
geom_text(stat='count',aes(label=..count..), vjust=1.6, color="white", size=3.5) +
theme_minimal()
ggplot() +
geom_line(data=non_fatal_crashes, aes(x=year, fill=year, colour="non_fatal"), stat = "count") + geom_point(data=non_fatal_crashes, aes(x=year, fill=year, colour="non_fatal"), stat = "count") +  geom_line(data=fatal_crashes, aes(x=year, fill=year, colour="fatal"),stat = "count") +
geom_point(data=fatal_crashes, aes(x=year, fill=year, colour="fatal"), stat = "count") +
theme_minimal()
fatal_by_engine<-sqldf("select [Engine.Type], count(*) as number from fatal_crashes group by [Engine.Type]")
fatal_by_engine
non_fatal_by_engine<-sqldf("select [Engine.Type], count(*) as number from non_fatal_crashes group by [Engine.Type]")
non_fatal_by_engine
reci_fatal<-data.frame(Engine.Type=c("Reciprocating", "Else"), number=c(fatal_by_engine[3, 2], sum(fatal_by_engine$number)-fatal_by_engine[3, 2]))
reci_fatal$fraction<-reci_fatal$number/sum(reci_fatal$number)
reci_fatal$ymax<-cumsum(reci_fatal$fraction)
reci_fatal$ymin<-c(0,head(reci_fatal$ymax,n=-1))
reci_fatal$labelPosition<-(reci_fatal$ymax + reci_fatal$ymin)/2
reci_fatal$label<-paste(reci_fatal$Engine.Type, "\n",
round(reci_fatal$number/sum(reci_fatal$number)*100, 2), "%")
ggplot(reci_fatal, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3)) +
geom_rect(aes(fill=Engine.Type)) +
geom_label(x=3.5,aes(y=labelPosition,label=label),size=3) +
xlim(2,4) +
coord_polar(theta="y") +
scale_fill_brewer(palette = 4) +
theme_void()+
theme(legend.position = "none") +
ggtitle("The Engine Types in Fatal Crashes")
reci_non_fatal<-data.frame(Engine.Type=c("Reciprocating", "Else"), number=c(non_fatal_by_engine[2, 2], sum(non_fatal_by_engine$number)-non_fatal_by_engine[2, 2]))
reci_non_fatal$fraction<-reci_non_fatal$number/sum(reci_non_fatal$number)
reci_non_fatal$ymax<-cumsum(reci_non_fatal$fraction)
reci_non_fatal$ymin<-c(0,head(reci_non_fatal$ymax,n=-1))
reci_non_fatal$labelPosition<-(reci_non_fatal$ymax + reci_non_fatal$ymin)/2
reci_non_fatal$label<-paste(reci_non_fatal$Engine.Type, "\n",
round(reci_non_fatal$number/sum(reci_non_fatal$number)*100, 2), "%")
ggplot(reci_non_fatal, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3)) +
geom_rect(aes(fill=Engine.Type)) +
geom_label(x=3.5,aes(y=labelPosition,label=label),size=3) +
xlim(2,4) +
coord_polar(theta="y") +
scale_fill_brewer(palette = 4) +
theme_void()+
theme(legend.position = "none") +
ggtitle("The Engine Types in Non-Fatal Crashes")
ggplot(data=accident_us, mapping = aes(x=Weather.Condition, fill=accident_category)) + geom_bar(stat="count",width=0.5,position='dodge')+
geom_text(stat='count',aes(label=..count..), color="black", size=3.5,position=position_dodge(0.5),vjust=-0.5)+
theme_minimal()
broad<-sqldf("select [Broad.Phase.of.Flight], count(*) as number, accident_category from accident_us group by [Broad.Phase.of.Flight], [accident_category]")
broad
ggplot(broad, aes(area=number, fill=number, label=Broad.Phase.of.Flight)) +
geom_treemap() +
geom_treemap_text(colour = "black", place = "topleft",grow = TRUE, alpha=.5) +
facet_wrap(~ accident_category) +
scale_fill_distiller(palette="Greens")
top5<-sqldf("select [Country], count([Country]) as count from aviation where [Country] not like '%  %' group by [Country] order by count desc limit 5")
top5
historical_death<-sqldf("select year, sum([Total.Fatal.Injuries]) as deaths from aviation group by year")
historical_death
ggplot() +
geom_line(data=historical_death, aes(x=year, y=deaths), stat = "identity") +
geom_point(data=historical_death, aes(x=year, y=deaths), stat = "identity") +
theme_minimal()
retail_url<-"https://raw.githubusercontent.com/jcbonilla/BusinessAnalytics/master/BAData/HDLData.csv"
data_retail<-read.csv(retail_url, header = TRUE, stringsAsFactors = FALSE)
head(data_retail)
ne_aggregate<-sqldf("select state, sum(pop_2000), sum(pop_2010), avg(income_2000), avg(income_2010), avg(pct_U18_2000), avg(pct_U18_2010), avg(pctcollege_2000), avg(pctcollege_2010), avg(ownhome_2000), avg(ownhome_2010), avg(density_2000) as density_2000, avg(density_2010) as density_2010, avg(pctwhite_2000), avg(pctwhite_2010), avg(pctblack_2000), avg(pctblack_2010) from data_retail where state in ('ME', 'NY', 'NJ', 'VT', 'MA','RI', 'CT', 'NH', 'PA') group By state")
ne_aggregate$region=c("connecticut", "massachusetts", "maine", "new hampshire", "new jersey", "new york", "pennsylvania", "rhode island", "vermont")
ne_aggregate
ne_change<-data.frame(state=ne_aggregate$state,
region=c("connecticut", "massachusetts", "maine", "new hampshire", "new jersey", "new york", "pennsylvania", "rhode island", "vermont"),
pop=(ne_aggregate[3] - ne_aggregate[2])/ne_aggregate[2],
income=(ne_aggregate[5] - ne_aggregate[4])/ne_aggregate[4],
pct_u18=(ne_aggregate[7] - ne_aggregate[6])/ne_aggregate[6],
pct_college=(ne_aggregate[9] - ne_aggregate[8])/ne_aggregate[8],
ownhome=round((ne_aggregate[11] - ne_aggregate[10])/ne_aggregate[10], 3),
density=(ne_aggregate[13] - ne_aggregate[12])/ne_aggregate[12],
pct_white=(ne_aggregate[15] - ne_aggregate[14])/ne_aggregate[14],
pct_black=(ne_aggregate[17] - ne_aggregate[16])/ne_aggregate[16])
names(ne_change)<-c("state", "region", "pop", "income", "pct_u18", "pct_college", "ownhome", "density", "pct_white", "pct_black")
ne_change
MainStates<-map_data("state")
MergedStates<-inner_join(MainStates, ne_change, by = "region")
ggplot(MergedStates, aes(x=long, y=lat, group=group, fill = pop)) +
geom_polygon(color="white", size = 0.2) +
scale_fill_continuous(name="Population Growth Rate", low = "#e7e7de", high = "#0f3057",limits = c(0,0.07))
ggplot(data = ne_change, aes(x=state, y=income)) +
geom_point(shape=17, size=5, color="#7ea04d") +
ylab("Annual income growth rate per capita")
MergedDensity<-inner_join(MainStates, ne_aggregate, by = "region")
ggplot(MergedDensity, aes(x=long, y=lat, group=group, fill = density_2010)) +
geom_polygon(color="white", size = 0.2) +
scale_fill_continuous(name="Density in 2010", low = "#ed6663", high = "#59405c",limits = c(0,3500))
ggplot(MergedStates, aes(x=long, y=lat, group=group, fill = density)) +
geom_polygon(color="white", size = 0.2) +
scale_fill_continuous(name="Change of Density", low = "#ed6663", high = "#59405c",limits = c(0,0.07))
ggplot(data=ne_change, mapping = aes(x=state, y=ownhome, fill=ownhome)) +
geom_bar(stat="identity", width=0.7) +
geom_text(aes(label=ownhome), vjust=1.6, color="black", size=3) +
scale_fill_continuous(name="Change rate of ownhome", low = "#ff5f40", high = "#24a19c")
pre_change<-data.frame(ne_change$pct_u18, ne_change$pct_college, ne_change$pct_white, ne_change$pct_black)
mat<-data.matrix(pre_change)
colnames(mat) = c("pct_u18", "pct_college", "pct_white", "pct_black")
rownames(mat) = c("CT", "MA", "ME", "NH", "NJ", "NY", "PA", "RI", "VT")
pheatmap(mat, display_numbers = TRUE,
cluster_cols = FALSE, cluster_rows = FALSE,
color = colorRampPalette(c("#ff4b5c","white","#7ea04d"))(1000),
fontsize = 12)
